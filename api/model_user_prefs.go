/*
Magical Playlist Sorter API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package faelist.com/sorterv1

import (
	"encoding/json"
)

// checks if the UserPrefs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPrefs{}

// UserPrefs struct for UserPrefs
type UserPrefs struct {
	// Uses the same ratings for a song across all user playlists.
	UseSingleSongRating *bool `json:"UseSingleSongRating,omitempty"`
	// If Single Song Ratings are disabled, should a new playlist copy ratings from the newest imported playlist, oldest imported playlist, or not copy ratings at all?
	CopySongRatingSource *string `json:"CopySongRatingSource,omitempty"`
}

// NewUserPrefs instantiates a new UserPrefs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPrefs() *UserPrefs {
	this := UserPrefs{}
	return &this
}

// NewUserPrefsWithDefaults instantiates a new UserPrefs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPrefsWithDefaults() *UserPrefs {
	this := UserPrefs{}
	return &this
}

// GetUseSingleSongRating returns the UseSingleSongRating field value if set, zero value otherwise.
func (o *UserPrefs) GetUseSingleSongRating() bool {
	if o == nil || IsNil(o.UseSingleSongRating) {
		var ret bool
		return ret
	}
	return *o.UseSingleSongRating
}

// GetUseSingleSongRatingOk returns a tuple with the UseSingleSongRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPrefs) GetUseSingleSongRatingOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSingleSongRating) {
		return nil, false
	}
	return o.UseSingleSongRating, true
}

// HasUseSingleSongRating returns a boolean if a field has been set.
func (o *UserPrefs) HasUseSingleSongRating() bool {
	if o != nil && !IsNil(o.UseSingleSongRating) {
		return true
	}

	return false
}

// SetUseSingleSongRating gets a reference to the given bool and assigns it to the UseSingleSongRating field.
func (o *UserPrefs) SetUseSingleSongRating(v bool) {
	o.UseSingleSongRating = &v
}

// GetCopySongRatingSource returns the CopySongRatingSource field value if set, zero value otherwise.
func (o *UserPrefs) GetCopySongRatingSource() string {
	if o == nil || IsNil(o.CopySongRatingSource) {
		var ret string
		return ret
	}
	return *o.CopySongRatingSource
}

// GetCopySongRatingSourceOk returns a tuple with the CopySongRatingSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPrefs) GetCopySongRatingSourceOk() (*string, bool) {
	if o == nil || IsNil(o.CopySongRatingSource) {
		return nil, false
	}
	return o.CopySongRatingSource, true
}

// HasCopySongRatingSource returns a boolean if a field has been set.
func (o *UserPrefs) HasCopySongRatingSource() bool {
	if o != nil && !IsNil(o.CopySongRatingSource) {
		return true
	}

	return false
}

// SetCopySongRatingSource gets a reference to the given string and assigns it to the CopySongRatingSource field.
func (o *UserPrefs) SetCopySongRatingSource(v string) {
	o.CopySongRatingSource = &v
}

func (o UserPrefs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPrefs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UseSingleSongRating) {
		toSerialize["UseSingleSongRating"] = o.UseSingleSongRating
	}
	if !IsNil(o.CopySongRatingSource) {
		toSerialize["CopySongRatingSource"] = o.CopySongRatingSource
	}
	return toSerialize, nil
}

type NullableUserPrefs struct {
	value *UserPrefs
	isSet bool
}

func (v NullableUserPrefs) Get() *UserPrefs {
	return v.value
}

func (v *NullableUserPrefs) Set(val *UserPrefs) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPrefs) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPrefs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPrefs(val *UserPrefs) *NullableUserPrefs {
	return &NullableUserPrefs{value: val, isSet: true}
}

func (v NullableUserPrefs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPrefs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


