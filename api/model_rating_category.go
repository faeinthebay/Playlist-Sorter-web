/*
Magical Playlist Sorter API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package faelist.com/sorterv1

import (
	"encoding/json"
)

// checks if the RatingCategory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RatingCategory{}

// RatingCategory struct for RatingCategory
type RatingCategory struct {
	Title *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	InternalID *string `json:"InternalID,omitempty"`
}

// NewRatingCategory instantiates a new RatingCategory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatingCategory() *RatingCategory {
	this := RatingCategory{}
	return &this
}

// NewRatingCategoryWithDefaults instantiates a new RatingCategory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatingCategoryWithDefaults() *RatingCategory {
	this := RatingCategory{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *RatingCategory) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatingCategory) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *RatingCategory) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *RatingCategory) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RatingCategory) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatingCategory) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RatingCategory) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RatingCategory) SetDescription(v string) {
	o.Description = &v
}

// GetInternalID returns the InternalID field value if set, zero value otherwise.
func (o *RatingCategory) GetInternalID() string {
	if o == nil || IsNil(o.InternalID) {
		var ret string
		return ret
	}
	return *o.InternalID
}

// GetInternalIDOk returns a tuple with the InternalID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RatingCategory) GetInternalIDOk() (*string, bool) {
	if o == nil || IsNil(o.InternalID) {
		return nil, false
	}
	return o.InternalID, true
}

// HasInternalID returns a boolean if a field has been set.
func (o *RatingCategory) HasInternalID() bool {
	if o != nil && !IsNil(o.InternalID) {
		return true
	}

	return false
}

// SetInternalID gets a reference to the given string and assigns it to the InternalID field.
func (o *RatingCategory) SetInternalID(v string) {
	o.InternalID = &v
}

func (o RatingCategory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RatingCategory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.InternalID) {
		toSerialize["InternalID"] = o.InternalID
	}
	return toSerialize, nil
}

type NullableRatingCategory struct {
	value *RatingCategory
	isSet bool
}

func (v NullableRatingCategory) Get() *RatingCategory {
	return v.value
}

func (v *NullableRatingCategory) Set(val *RatingCategory) {
	v.value = val
	v.isSet = true
}

func (v NullableRatingCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableRatingCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatingCategory(val *RatingCategory) *NullableRatingCategory {
	return &NullableRatingCategory{value: val, isSet: true}
}

func (v NullableRatingCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatingCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


