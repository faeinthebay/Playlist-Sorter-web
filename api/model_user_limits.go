/*
Magical Playlist Sorter API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package faelist.com/sorterv1

import (
	"encoding/json"
	"time"
)

// checks if the UserLimits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserLimits{}

// UserLimits struct for UserLimits
type UserLimits struct {
	// The user's allowance tier.
	Tier *string `json:"tier,omitempty"`
	// The date and time when a user's account will be downgraded if payment is not made.
	TierExpiration NullableTime `json:"TierExpiration,omitempty"`
	AutoRenewEnabled *bool `json:"AutoRenewEnabled,omitempty"`
	// Whether an account is being restricted (by exceeding a quota after an allowance changes).
	IsRestricted *bool `json:"IsRestricted,omitempty"`
	LoadedSongs *int32 `json:"LoadedSongs,omitempty"`
	// Maximum number of unique songs linked to playlists in a user's account.  One unique song can be linked to multiple song entires per streaming service.  0 indicates unlimited.
	MaximumSongs *int32 `json:"MaximumSongs,omitempty"`
	LoadedPlaylists *int32 `json:"LoadedPlaylists,omitempty"`
	// Maximum number of playlists loaded to a user's account.  One playlist can be linked to multiple services.  0 indicates unlimited.
	MaximumPlaylists *int32 `json:"MaximumPlaylists,omitempty"`
	MaximumPlaylistLength *int32 `json:"MaximumPlaylistLength,omitempty"`
}

// NewUserLimits instantiates a new UserLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserLimits() *UserLimits {
	this := UserLimits{}
	return &this
}

// NewUserLimitsWithDefaults instantiates a new UserLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserLimitsWithDefaults() *UserLimits {
	this := UserLimits{}
	return &this
}

// GetTier returns the Tier field value if set, zero value otherwise.
func (o *UserLimits) GetTier() string {
	if o == nil || IsNil(o.Tier) {
		var ret string
		return ret
	}
	return *o.Tier
}

// GetTierOk returns a tuple with the Tier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetTierOk() (*string, bool) {
	if o == nil || IsNil(o.Tier) {
		return nil, false
	}
	return o.Tier, true
}

// HasTier returns a boolean if a field has been set.
func (o *UserLimits) HasTier() bool {
	if o != nil && !IsNil(o.Tier) {
		return true
	}

	return false
}

// SetTier gets a reference to the given string and assigns it to the Tier field.
func (o *UserLimits) SetTier(v string) {
	o.Tier = &v
}

// GetTierExpiration returns the TierExpiration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserLimits) GetTierExpiration() time.Time {
	if o == nil || IsNil(o.TierExpiration.Get()) {
		var ret time.Time
		return ret
	}
	return *o.TierExpiration.Get()
}

// GetTierExpirationOk returns a tuple with the TierExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserLimits) GetTierExpirationOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.TierExpiration.Get(), o.TierExpiration.IsSet()
}

// HasTierExpiration returns a boolean if a field has been set.
func (o *UserLimits) HasTierExpiration() bool {
	if o != nil && o.TierExpiration.IsSet() {
		return true
	}

	return false
}

// SetTierExpiration gets a reference to the given NullableTime and assigns it to the TierExpiration field.
func (o *UserLimits) SetTierExpiration(v time.Time) {
	o.TierExpiration.Set(&v)
}
// SetTierExpirationNil sets the value for TierExpiration to be an explicit nil
func (o *UserLimits) SetTierExpirationNil() {
	o.TierExpiration.Set(nil)
}

// UnsetTierExpiration ensures that no value is present for TierExpiration, not even an explicit nil
func (o *UserLimits) UnsetTierExpiration() {
	o.TierExpiration.Unset()
}

// GetAutoRenewEnabled returns the AutoRenewEnabled field value if set, zero value otherwise.
func (o *UserLimits) GetAutoRenewEnabled() bool {
	if o == nil || IsNil(o.AutoRenewEnabled) {
		var ret bool
		return ret
	}
	return *o.AutoRenewEnabled
}

// GetAutoRenewEnabledOk returns a tuple with the AutoRenewEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetAutoRenewEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoRenewEnabled) {
		return nil, false
	}
	return o.AutoRenewEnabled, true
}

// HasAutoRenewEnabled returns a boolean if a field has been set.
func (o *UserLimits) HasAutoRenewEnabled() bool {
	if o != nil && !IsNil(o.AutoRenewEnabled) {
		return true
	}

	return false
}

// SetAutoRenewEnabled gets a reference to the given bool and assigns it to the AutoRenewEnabled field.
func (o *UserLimits) SetAutoRenewEnabled(v bool) {
	o.AutoRenewEnabled = &v
}

// GetIsRestricted returns the IsRestricted field value if set, zero value otherwise.
func (o *UserLimits) GetIsRestricted() bool {
	if o == nil || IsNil(o.IsRestricted) {
		var ret bool
		return ret
	}
	return *o.IsRestricted
}

// GetIsRestrictedOk returns a tuple with the IsRestricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetIsRestrictedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRestricted) {
		return nil, false
	}
	return o.IsRestricted, true
}

// HasIsRestricted returns a boolean if a field has been set.
func (o *UserLimits) HasIsRestricted() bool {
	if o != nil && !IsNil(o.IsRestricted) {
		return true
	}

	return false
}

// SetIsRestricted gets a reference to the given bool and assigns it to the IsRestricted field.
func (o *UserLimits) SetIsRestricted(v bool) {
	o.IsRestricted = &v
}

// GetLoadedSongs returns the LoadedSongs field value if set, zero value otherwise.
func (o *UserLimits) GetLoadedSongs() int32 {
	if o == nil || IsNil(o.LoadedSongs) {
		var ret int32
		return ret
	}
	return *o.LoadedSongs
}

// GetLoadedSongsOk returns a tuple with the LoadedSongs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetLoadedSongsOk() (*int32, bool) {
	if o == nil || IsNil(o.LoadedSongs) {
		return nil, false
	}
	return o.LoadedSongs, true
}

// HasLoadedSongs returns a boolean if a field has been set.
func (o *UserLimits) HasLoadedSongs() bool {
	if o != nil && !IsNil(o.LoadedSongs) {
		return true
	}

	return false
}

// SetLoadedSongs gets a reference to the given int32 and assigns it to the LoadedSongs field.
func (o *UserLimits) SetLoadedSongs(v int32) {
	o.LoadedSongs = &v
}

// GetMaximumSongs returns the MaximumSongs field value if set, zero value otherwise.
func (o *UserLimits) GetMaximumSongs() int32 {
	if o == nil || IsNil(o.MaximumSongs) {
		var ret int32
		return ret
	}
	return *o.MaximumSongs
}

// GetMaximumSongsOk returns a tuple with the MaximumSongs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetMaximumSongsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumSongs) {
		return nil, false
	}
	return o.MaximumSongs, true
}

// HasMaximumSongs returns a boolean if a field has been set.
func (o *UserLimits) HasMaximumSongs() bool {
	if o != nil && !IsNil(o.MaximumSongs) {
		return true
	}

	return false
}

// SetMaximumSongs gets a reference to the given int32 and assigns it to the MaximumSongs field.
func (o *UserLimits) SetMaximumSongs(v int32) {
	o.MaximumSongs = &v
}

// GetLoadedPlaylists returns the LoadedPlaylists field value if set, zero value otherwise.
func (o *UserLimits) GetLoadedPlaylists() int32 {
	if o == nil || IsNil(o.LoadedPlaylists) {
		var ret int32
		return ret
	}
	return *o.LoadedPlaylists
}

// GetLoadedPlaylistsOk returns a tuple with the LoadedPlaylists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetLoadedPlaylistsOk() (*int32, bool) {
	if o == nil || IsNil(o.LoadedPlaylists) {
		return nil, false
	}
	return o.LoadedPlaylists, true
}

// HasLoadedPlaylists returns a boolean if a field has been set.
func (o *UserLimits) HasLoadedPlaylists() bool {
	if o != nil && !IsNil(o.LoadedPlaylists) {
		return true
	}

	return false
}

// SetLoadedPlaylists gets a reference to the given int32 and assigns it to the LoadedPlaylists field.
func (o *UserLimits) SetLoadedPlaylists(v int32) {
	o.LoadedPlaylists = &v
}

// GetMaximumPlaylists returns the MaximumPlaylists field value if set, zero value otherwise.
func (o *UserLimits) GetMaximumPlaylists() int32 {
	if o == nil || IsNil(o.MaximumPlaylists) {
		var ret int32
		return ret
	}
	return *o.MaximumPlaylists
}

// GetMaximumPlaylistsOk returns a tuple with the MaximumPlaylists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetMaximumPlaylistsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumPlaylists) {
		return nil, false
	}
	return o.MaximumPlaylists, true
}

// HasMaximumPlaylists returns a boolean if a field has been set.
func (o *UserLimits) HasMaximumPlaylists() bool {
	if o != nil && !IsNil(o.MaximumPlaylists) {
		return true
	}

	return false
}

// SetMaximumPlaylists gets a reference to the given int32 and assigns it to the MaximumPlaylists field.
func (o *UserLimits) SetMaximumPlaylists(v int32) {
	o.MaximumPlaylists = &v
}

// GetMaximumPlaylistLength returns the MaximumPlaylistLength field value if set, zero value otherwise.
func (o *UserLimits) GetMaximumPlaylistLength() int32 {
	if o == nil || IsNil(o.MaximumPlaylistLength) {
		var ret int32
		return ret
	}
	return *o.MaximumPlaylistLength
}

// GetMaximumPlaylistLengthOk returns a tuple with the MaximumPlaylistLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserLimits) GetMaximumPlaylistLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumPlaylistLength) {
		return nil, false
	}
	return o.MaximumPlaylistLength, true
}

// HasMaximumPlaylistLength returns a boolean if a field has been set.
func (o *UserLimits) HasMaximumPlaylistLength() bool {
	if o != nil && !IsNil(o.MaximumPlaylistLength) {
		return true
	}

	return false
}

// SetMaximumPlaylistLength gets a reference to the given int32 and assigns it to the MaximumPlaylistLength field.
func (o *UserLimits) SetMaximumPlaylistLength(v int32) {
	o.MaximumPlaylistLength = &v
}

func (o UserLimits) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserLimits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tier) {
		toSerialize["tier"] = o.Tier
	}
	if o.TierExpiration.IsSet() {
		toSerialize["TierExpiration"] = o.TierExpiration.Get()
	}
	if !IsNil(o.AutoRenewEnabled) {
		toSerialize["AutoRenewEnabled"] = o.AutoRenewEnabled
	}
	if !IsNil(o.IsRestricted) {
		toSerialize["IsRestricted"] = o.IsRestricted
	}
	if !IsNil(o.LoadedSongs) {
		toSerialize["LoadedSongs"] = o.LoadedSongs
	}
	if !IsNil(o.MaximumSongs) {
		toSerialize["MaximumSongs"] = o.MaximumSongs
	}
	if !IsNil(o.LoadedPlaylists) {
		toSerialize["LoadedPlaylists"] = o.LoadedPlaylists
	}
	if !IsNil(o.MaximumPlaylists) {
		toSerialize["MaximumPlaylists"] = o.MaximumPlaylists
	}
	if !IsNil(o.MaximumPlaylistLength) {
		toSerialize["MaximumPlaylistLength"] = o.MaximumPlaylistLength
	}
	return toSerialize, nil
}

type NullableUserLimits struct {
	value *UserLimits
	isSet bool
}

func (v NullableUserLimits) Get() *UserLimits {
	return v.value
}

func (v *NullableUserLimits) Set(val *UserLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableUserLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableUserLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserLimits(val *UserLimits) *NullableUserLimits {
	return &NullableUserLimits{value: val, isSet: true}
}

func (v NullableUserLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


