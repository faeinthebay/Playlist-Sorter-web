/*
Magical Playlist Sorter API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package faelist.com/sorterv1

import (
	"encoding/json"
)

// checks if the SongRating type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SongRating{}

// SongRating struct for SongRating
type SongRating struct {
	RatingCategory *RatingCategory `json:"RatingCategory,omitempty"`
	Value NullableInt32 `json:"value,omitempty"`
}

// NewSongRating instantiates a new SongRating object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSongRating() *SongRating {
	this := SongRating{}
	return &this
}

// NewSongRatingWithDefaults instantiates a new SongRating object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSongRatingWithDefaults() *SongRating {
	this := SongRating{}
	return &this
}

// GetRatingCategory returns the RatingCategory field value if set, zero value otherwise.
func (o *SongRating) GetRatingCategory() RatingCategory {
	if o == nil || IsNil(o.RatingCategory) {
		var ret RatingCategory
		return ret
	}
	return *o.RatingCategory
}

// GetRatingCategoryOk returns a tuple with the RatingCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SongRating) GetRatingCategoryOk() (*RatingCategory, bool) {
	if o == nil || IsNil(o.RatingCategory) {
		return nil, false
	}
	return o.RatingCategory, true
}

// HasRatingCategory returns a boolean if a field has been set.
func (o *SongRating) HasRatingCategory() bool {
	if o != nil && !IsNil(o.RatingCategory) {
		return true
	}

	return false
}

// SetRatingCategory gets a reference to the given RatingCategory and assigns it to the RatingCategory field.
func (o *SongRating) SetRatingCategory(v RatingCategory) {
	o.RatingCategory = &v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SongRating) GetValue() int32 {
	if o == nil || IsNil(o.Value.Get()) {
		var ret int32
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SongRating) GetValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *SongRating) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableInt32 and assigns it to the Value field.
func (o *SongRating) SetValue(v int32) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *SongRating) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *SongRating) UnsetValue() {
	o.Value.Unset()
}

func (o SongRating) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SongRating) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RatingCategory) {
		toSerialize["RatingCategory"] = o.RatingCategory
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	return toSerialize, nil
}

type NullableSongRating struct {
	value *SongRating
	isSet bool
}

func (v NullableSongRating) Get() *SongRating {
	return v.value
}

func (v *NullableSongRating) Set(val *SongRating) {
	v.value = val
	v.isSet = true
}

func (v NullableSongRating) IsSet() bool {
	return v.isSet
}

func (v *NullableSongRating) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSongRating(val *SongRating) *NullableSongRating {
	return &NullableSongRating{value: val, isSet: true}
}

func (v NullableSongRating) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSongRating) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


