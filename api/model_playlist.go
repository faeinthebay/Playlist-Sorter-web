/*
Magical Playlist Sorter API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package faelist.com/sorterv1

import (
	"encoding/json"
	"time"
)

// checks if the Playlist type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Playlist{}

// Playlist struct for Playlist
type Playlist struct {
	Name *string `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	InternalID *string `json:"InternalID,omitempty"`
	SpotPlaylistID NullableString `json:"SpotPlaylistID,omitempty"`
	YTMPlaylistID NullableString `json:"YTMPlaylistID,omitempty"`
	ApplPlaylistID NullableInt32 `json:"ApplPlaylistID,omitempty"`
	// Decides which service is the \"source of truth\", whose changes are propogated to playlists in other services.  The services that are not sources of truth will have their changes ignored then overwritten.
	SourceOfTruth *PrimaryService `json:"SourceOfTruth,omitempty"`
	ImportDate *time.Time `json:"ImportDate,omitempty"`
	LastUpdated *time.Time `json:"LastUpdated,omitempty"`
	// Whether playlist and song metadata are still being imported
	IsLoading *bool `json:"isLoading,omitempty"`
	Songs [][]interface{} `json:"songs,omitempty"`
}

// NewPlaylist instantiates a new Playlist object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlaylist() *Playlist {
	this := Playlist{}
	return &this
}

// NewPlaylistWithDefaults instantiates a new Playlist object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaylistWithDefaults() *Playlist {
	this := Playlist{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Playlist) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playlist) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Playlist) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Playlist) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Playlist) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Playlist) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Playlist) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Playlist) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Playlist) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Playlist) UnsetDescription() {
	o.Description.Unset()
}

// GetInternalID returns the InternalID field value if set, zero value otherwise.
func (o *Playlist) GetInternalID() string {
	if o == nil || IsNil(o.InternalID) {
		var ret string
		return ret
	}
	return *o.InternalID
}

// GetInternalIDOk returns a tuple with the InternalID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playlist) GetInternalIDOk() (*string, bool) {
	if o == nil || IsNil(o.InternalID) {
		return nil, false
	}
	return o.InternalID, true
}

// HasInternalID returns a boolean if a field has been set.
func (o *Playlist) HasInternalID() bool {
	if o != nil && !IsNil(o.InternalID) {
		return true
	}

	return false
}

// SetInternalID gets a reference to the given string and assigns it to the InternalID field.
func (o *Playlist) SetInternalID(v string) {
	o.InternalID = &v
}

// GetSpotPlaylistID returns the SpotPlaylistID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Playlist) GetSpotPlaylistID() string {
	if o == nil || IsNil(o.SpotPlaylistID.Get()) {
		var ret string
		return ret
	}
	return *o.SpotPlaylistID.Get()
}

// GetSpotPlaylistIDOk returns a tuple with the SpotPlaylistID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Playlist) GetSpotPlaylistIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SpotPlaylistID.Get(), o.SpotPlaylistID.IsSet()
}

// HasSpotPlaylistID returns a boolean if a field has been set.
func (o *Playlist) HasSpotPlaylistID() bool {
	if o != nil && o.SpotPlaylistID.IsSet() {
		return true
	}

	return false
}

// SetSpotPlaylistID gets a reference to the given NullableString and assigns it to the SpotPlaylistID field.
func (o *Playlist) SetSpotPlaylistID(v string) {
	o.SpotPlaylistID.Set(&v)
}
// SetSpotPlaylistIDNil sets the value for SpotPlaylistID to be an explicit nil
func (o *Playlist) SetSpotPlaylistIDNil() {
	o.SpotPlaylistID.Set(nil)
}

// UnsetSpotPlaylistID ensures that no value is present for SpotPlaylistID, not even an explicit nil
func (o *Playlist) UnsetSpotPlaylistID() {
	o.SpotPlaylistID.Unset()
}

// GetYTMPlaylistID returns the YTMPlaylistID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Playlist) GetYTMPlaylistID() string {
	if o == nil || IsNil(o.YTMPlaylistID.Get()) {
		var ret string
		return ret
	}
	return *o.YTMPlaylistID.Get()
}

// GetYTMPlaylistIDOk returns a tuple with the YTMPlaylistID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Playlist) GetYTMPlaylistIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.YTMPlaylistID.Get(), o.YTMPlaylistID.IsSet()
}

// HasYTMPlaylistID returns a boolean if a field has been set.
func (o *Playlist) HasYTMPlaylistID() bool {
	if o != nil && o.YTMPlaylistID.IsSet() {
		return true
	}

	return false
}

// SetYTMPlaylistID gets a reference to the given NullableString and assigns it to the YTMPlaylistID field.
func (o *Playlist) SetYTMPlaylistID(v string) {
	o.YTMPlaylistID.Set(&v)
}
// SetYTMPlaylistIDNil sets the value for YTMPlaylistID to be an explicit nil
func (o *Playlist) SetYTMPlaylistIDNil() {
	o.YTMPlaylistID.Set(nil)
}

// UnsetYTMPlaylistID ensures that no value is present for YTMPlaylistID, not even an explicit nil
func (o *Playlist) UnsetYTMPlaylistID() {
	o.YTMPlaylistID.Unset()
}

// GetApplPlaylistID returns the ApplPlaylistID field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Playlist) GetApplPlaylistID() int32 {
	if o == nil || IsNil(o.ApplPlaylistID.Get()) {
		var ret int32
		return ret
	}
	return *o.ApplPlaylistID.Get()
}

// GetApplPlaylistIDOk returns a tuple with the ApplPlaylistID field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Playlist) GetApplPlaylistIDOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApplPlaylistID.Get(), o.ApplPlaylistID.IsSet()
}

// HasApplPlaylistID returns a boolean if a field has been set.
func (o *Playlist) HasApplPlaylistID() bool {
	if o != nil && o.ApplPlaylistID.IsSet() {
		return true
	}

	return false
}

// SetApplPlaylistID gets a reference to the given NullableInt32 and assigns it to the ApplPlaylistID field.
func (o *Playlist) SetApplPlaylistID(v int32) {
	o.ApplPlaylistID.Set(&v)
}
// SetApplPlaylistIDNil sets the value for ApplPlaylistID to be an explicit nil
func (o *Playlist) SetApplPlaylistIDNil() {
	o.ApplPlaylistID.Set(nil)
}

// UnsetApplPlaylistID ensures that no value is present for ApplPlaylistID, not even an explicit nil
func (o *Playlist) UnsetApplPlaylistID() {
	o.ApplPlaylistID.Unset()
}

// GetSourceOfTruth returns the SourceOfTruth field value if set, zero value otherwise.
func (o *Playlist) GetSourceOfTruth() PrimaryService {
	if o == nil || IsNil(o.SourceOfTruth) {
		var ret PrimaryService
		return ret
	}
	return *o.SourceOfTruth
}

// GetSourceOfTruthOk returns a tuple with the SourceOfTruth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playlist) GetSourceOfTruthOk() (*PrimaryService, bool) {
	if o == nil || IsNil(o.SourceOfTruth) {
		return nil, false
	}
	return o.SourceOfTruth, true
}

// HasSourceOfTruth returns a boolean if a field has been set.
func (o *Playlist) HasSourceOfTruth() bool {
	if o != nil && !IsNil(o.SourceOfTruth) {
		return true
	}

	return false
}

// SetSourceOfTruth gets a reference to the given PrimaryService and assigns it to the SourceOfTruth field.
func (o *Playlist) SetSourceOfTruth(v PrimaryService) {
	o.SourceOfTruth = &v
}

// GetImportDate returns the ImportDate field value if set, zero value otherwise.
func (o *Playlist) GetImportDate() time.Time {
	if o == nil || IsNil(o.ImportDate) {
		var ret time.Time
		return ret
	}
	return *o.ImportDate
}

// GetImportDateOk returns a tuple with the ImportDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playlist) GetImportDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ImportDate) {
		return nil, false
	}
	return o.ImportDate, true
}

// HasImportDate returns a boolean if a field has been set.
func (o *Playlist) HasImportDate() bool {
	if o != nil && !IsNil(o.ImportDate) {
		return true
	}

	return false
}

// SetImportDate gets a reference to the given time.Time and assigns it to the ImportDate field.
func (o *Playlist) SetImportDate(v time.Time) {
	o.ImportDate = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Playlist) GetLastUpdated() time.Time {
	if o == nil || IsNil(o.LastUpdated) {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playlist) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Playlist) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *Playlist) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetIsLoading returns the IsLoading field value if set, zero value otherwise.
func (o *Playlist) GetIsLoading() bool {
	if o == nil || IsNil(o.IsLoading) {
		var ret bool
		return ret
	}
	return *o.IsLoading
}

// GetIsLoadingOk returns a tuple with the IsLoading field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playlist) GetIsLoadingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLoading) {
		return nil, false
	}
	return o.IsLoading, true
}

// HasIsLoading returns a boolean if a field has been set.
func (o *Playlist) HasIsLoading() bool {
	if o != nil && !IsNil(o.IsLoading) {
		return true
	}

	return false
}

// SetIsLoading gets a reference to the given bool and assigns it to the IsLoading field.
func (o *Playlist) SetIsLoading(v bool) {
	o.IsLoading = &v
}

// GetSongs returns the Songs field value if set, zero value otherwise.
func (o *Playlist) GetSongs() [][]interface{} {
	if o == nil || IsNil(o.Songs) {
		var ret [][]interface{}
		return ret
	}
	return o.Songs
}

// GetSongsOk returns a tuple with the Songs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Playlist) GetSongsOk() ([][]interface{}, bool) {
	if o == nil || IsNil(o.Songs) {
		return nil, false
	}
	return o.Songs, true
}

// HasSongs returns a boolean if a field has been set.
func (o *Playlist) HasSongs() bool {
	if o != nil && !IsNil(o.Songs) {
		return true
	}

	return false
}

// SetSongs gets a reference to the given [][]interface{} and assigns it to the Songs field.
func (o *Playlist) SetSongs(v [][]interface{}) {
	o.Songs = v
}

func (o Playlist) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Playlist) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.InternalID) {
		toSerialize["InternalID"] = o.InternalID
	}
	if o.SpotPlaylistID.IsSet() {
		toSerialize["SpotPlaylistID"] = o.SpotPlaylistID.Get()
	}
	if o.YTMPlaylistID.IsSet() {
		toSerialize["YTMPlaylistID"] = o.YTMPlaylistID.Get()
	}
	if o.ApplPlaylistID.IsSet() {
		toSerialize["ApplPlaylistID"] = o.ApplPlaylistID.Get()
	}
	if !IsNil(o.SourceOfTruth) {
		toSerialize["SourceOfTruth"] = o.SourceOfTruth
	}
	if !IsNil(o.ImportDate) {
		toSerialize["ImportDate"] = o.ImportDate
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["LastUpdated"] = o.LastUpdated
	}
	if !IsNil(o.IsLoading) {
		toSerialize["isLoading"] = o.IsLoading
	}
	if !IsNil(o.Songs) {
		toSerialize["songs"] = o.Songs
	}
	return toSerialize, nil
}

type NullablePlaylist struct {
	value *Playlist
	isSet bool
}

func (v NullablePlaylist) Get() *Playlist {
	return v.value
}

func (v *NullablePlaylist) Set(val *Playlist) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaylist) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaylist) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaylist(val *Playlist) *NullablePlaylist {
	return &NullablePlaylist{value: val, isSet: true}
}

func (v NullablePlaylist) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaylist) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


