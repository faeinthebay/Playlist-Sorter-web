/*
Magical Playlist Sorter API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package faelist.com/sorterv1

import (
	"encoding/json"
)

// checks if the Song type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Song{}

// Song A song that could belong to multiple playlists and be from multiple streaming services.  Belongs to a single user.
type Song struct {
	Title *string `json:"title,omitempty"`
	Artist *string `json:"artist,omitempty"`
	// Length of song in seconds (rounded when provided in milliseconds)
	LengthSeconds *int32 `json:"lengthSeconds,omitempty"`
	SpotSongIDs []string `json:"SpotSongIDs,omitempty"`
	ApplSongIDs []int32 `json:"ApplSongIDs,omitempty"`
	YTMSongIDs []string `json:"YTMSongIDs,omitempty"`
}

// NewSong instantiates a new Song object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSong() *Song {
	this := Song{}
	return &this
}

// NewSongWithDefaults instantiates a new Song object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSongWithDefaults() *Song {
	this := Song{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Song) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Song) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Song) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Song) SetTitle(v string) {
	o.Title = &v
}

// GetArtist returns the Artist field value if set, zero value otherwise.
func (o *Song) GetArtist() string {
	if o == nil || IsNil(o.Artist) {
		var ret string
		return ret
	}
	return *o.Artist
}

// GetArtistOk returns a tuple with the Artist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Song) GetArtistOk() (*string, bool) {
	if o == nil || IsNil(o.Artist) {
		return nil, false
	}
	return o.Artist, true
}

// HasArtist returns a boolean if a field has been set.
func (o *Song) HasArtist() bool {
	if o != nil && !IsNil(o.Artist) {
		return true
	}

	return false
}

// SetArtist gets a reference to the given string and assigns it to the Artist field.
func (o *Song) SetArtist(v string) {
	o.Artist = &v
}

// GetLengthSeconds returns the LengthSeconds field value if set, zero value otherwise.
func (o *Song) GetLengthSeconds() int32 {
	if o == nil || IsNil(o.LengthSeconds) {
		var ret int32
		return ret
	}
	return *o.LengthSeconds
}

// GetLengthSecondsOk returns a tuple with the LengthSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Song) GetLengthSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.LengthSeconds) {
		return nil, false
	}
	return o.LengthSeconds, true
}

// HasLengthSeconds returns a boolean if a field has been set.
func (o *Song) HasLengthSeconds() bool {
	if o != nil && !IsNil(o.LengthSeconds) {
		return true
	}

	return false
}

// SetLengthSeconds gets a reference to the given int32 and assigns it to the LengthSeconds field.
func (o *Song) SetLengthSeconds(v int32) {
	o.LengthSeconds = &v
}

// GetSpotSongIDs returns the SpotSongIDs field value if set, zero value otherwise.
func (o *Song) GetSpotSongIDs() []string {
	if o == nil || IsNil(o.SpotSongIDs) {
		var ret []string
		return ret
	}
	return o.SpotSongIDs
}

// GetSpotSongIDsOk returns a tuple with the SpotSongIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Song) GetSpotSongIDsOk() ([]string, bool) {
	if o == nil || IsNil(o.SpotSongIDs) {
		return nil, false
	}
	return o.SpotSongIDs, true
}

// HasSpotSongIDs returns a boolean if a field has been set.
func (o *Song) HasSpotSongIDs() bool {
	if o != nil && !IsNil(o.SpotSongIDs) {
		return true
	}

	return false
}

// SetSpotSongIDs gets a reference to the given []string and assigns it to the SpotSongIDs field.
func (o *Song) SetSpotSongIDs(v []string) {
	o.SpotSongIDs = v
}

// GetApplSongIDs returns the ApplSongIDs field value if set, zero value otherwise.
func (o *Song) GetApplSongIDs() []int32 {
	if o == nil || IsNil(o.ApplSongIDs) {
		var ret []int32
		return ret
	}
	return o.ApplSongIDs
}

// GetApplSongIDsOk returns a tuple with the ApplSongIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Song) GetApplSongIDsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ApplSongIDs) {
		return nil, false
	}
	return o.ApplSongIDs, true
}

// HasApplSongIDs returns a boolean if a field has been set.
func (o *Song) HasApplSongIDs() bool {
	if o != nil && !IsNil(o.ApplSongIDs) {
		return true
	}

	return false
}

// SetApplSongIDs gets a reference to the given []int32 and assigns it to the ApplSongIDs field.
func (o *Song) SetApplSongIDs(v []int32) {
	o.ApplSongIDs = v
}

// GetYTMSongIDs returns the YTMSongIDs field value if set, zero value otherwise.
func (o *Song) GetYTMSongIDs() []string {
	if o == nil || IsNil(o.YTMSongIDs) {
		var ret []string
		return ret
	}
	return o.YTMSongIDs
}

// GetYTMSongIDsOk returns a tuple with the YTMSongIDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Song) GetYTMSongIDsOk() ([]string, bool) {
	if o == nil || IsNil(o.YTMSongIDs) {
		return nil, false
	}
	return o.YTMSongIDs, true
}

// HasYTMSongIDs returns a boolean if a field has been set.
func (o *Song) HasYTMSongIDs() bool {
	if o != nil && !IsNil(o.YTMSongIDs) {
		return true
	}

	return false
}

// SetYTMSongIDs gets a reference to the given []string and assigns it to the YTMSongIDs field.
func (o *Song) SetYTMSongIDs(v []string) {
	o.YTMSongIDs = v
}

func (o Song) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Song) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Artist) {
		toSerialize["artist"] = o.Artist
	}
	if !IsNil(o.LengthSeconds) {
		toSerialize["lengthSeconds"] = o.LengthSeconds
	}
	if !IsNil(o.SpotSongIDs) {
		toSerialize["SpotSongIDs"] = o.SpotSongIDs
	}
	if !IsNil(o.ApplSongIDs) {
		toSerialize["ApplSongIDs"] = o.ApplSongIDs
	}
	if !IsNil(o.YTMSongIDs) {
		toSerialize["YTMSongIDs"] = o.YTMSongIDs
	}
	return toSerialize, nil
}

type NullableSong struct {
	value *Song
	isSet bool
}

func (v NullableSong) Get() *Song {
	return v.value
}

func (v *NullableSong) Set(val *Song) {
	v.value = val
	v.isSet = true
}

func (v NullableSong) IsSet() bool {
	return v.isSet
}

func (v *NullableSong) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSong(val *Song) *NullableSong {
	return &NullableSong{value: val, isSet: true}
}

func (v NullableSong) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSong) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


