/*
Magical Playlist Sorter API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package faelist.com/sorterv1

import (
	"encoding/json"
	"fmt"
)

// PrimaryService the model 'PrimaryService'
type PrimaryService string

// List of PrimaryService
const (
	SPOT PrimaryService = "Spot"
	APPL PrimaryService = "Appl"
	YTM PrimaryService = "YTM"
)

// All allowed values of PrimaryService enum
var AllowedPrimaryServiceEnumValues = []PrimaryService{
	"Spot",
	"Appl",
	"YTM",
}

func (v *PrimaryService) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PrimaryService(value)
	for _, existing := range AllowedPrimaryServiceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PrimaryService", value)
}

// NewPrimaryServiceFromValue returns a pointer to a valid PrimaryService
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPrimaryServiceFromValue(v string) (*PrimaryService, error) {
	ev := PrimaryService(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PrimaryService: valid values are %v", v, AllowedPrimaryServiceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PrimaryService) IsValid() bool {
	for _, existing := range AllowedPrimaryServiceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PrimaryService value
func (v PrimaryService) Ptr() *PrimaryService {
	return &v
}

type NullablePrimaryService struct {
	value *PrimaryService
	isSet bool
}

func (v NullablePrimaryService) Get() *PrimaryService {
	return v.value
}

func (v *NullablePrimaryService) Set(val *PrimaryService) {
	v.value = val
	v.isSet = true
}

func (v NullablePrimaryService) IsSet() bool {
	return v.isSet
}

func (v *NullablePrimaryService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrimaryService(val *PrimaryService) *NullablePrimaryService {
	return &NullablePrimaryService{value: val, isSet: true}
}

func (v NullablePrimaryService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrimaryService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

