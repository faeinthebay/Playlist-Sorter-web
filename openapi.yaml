openapi: '3.1.1' # Can't use nullable property with OpenAPI 3.1
info:
  title: Magical Playlist Sorter API
  version: '1.0'
servers:
  - url: https://api.server.test/v1

paths:
  /playlists:
    get:
      description: Lists all playlists for the authenticated user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                # List of playlist objects (song lists are empty)
                type: array
                items: 
                  $ref: "#/components/schemas/Playlist"
    post:
      description: Adds a playlist from a service to this user's profile and gets metadata about its songs
      parameters:
        - name: ID
          in: query
          required: true
          schema:
            type: object
            properties:
              SpotPlaylistID:
                $ref: "#/components/schemas/SpotPlaylistID"
              ApplSongID:
                $ref: "#/components/schemas/ApplPlaylistID"
              YTMSongID:
                $ref: "#/components/schemas/YTMPlaylistID"
            minProperties: 1
      responses:
        "201":
          description: Imported
        "404":
          description: Could not access external playlist
        "409":
          description: Already imported; request ignored
  /playlists/{id}:
    get:
      description: Gives a playlist's metadata and songs by its internal UUID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Playlist"
        "404":
          description: Playlist not found in this user's profile
    delete:
      description: Irreversibly deletes a playlist and associated song ratings from its user's profile by its internal UUID.  
      responses:
        "200":
          description: OK
        "404":
          description: Playlist not deleted because it was not found in this user's profile
    patch:
      description: Updates the metadata of an individual playlist by its internal UUID
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Playlist"
              # TODO: Ensure that partial updates requests are accepted
      responses:
        "200":
          description: Updated
        "404":
          description: Playlist not updated because it was not found in this user's profile
    parameters:
      - in: path
        name: id
        required: true # TODO: Ignore validation error?
        schema:
          type: string
          format: uuid
  /song:
    parameters:
      - name: ID
        in: query
        required: true
        schema:
          type: object
          properties:
            SpotSongID:
              $ref: "#/components/schemas/SpotSongID"
            ApplSongID:
              $ref: "#/components/schemas/ApplSongID"
            YTMSongID:
              $ref: "#/components/schemas/YTMSongID"
          minProperties: 1
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Song"
    # post method is not needed because songs are automatically added with playlists, and can be automatically pruned
    patch:
      responses:
        "200":
          description: Updated
        "404":
          description: Song not updated because it has not been loaded by this user
  /user/quota:
    get:
      description: Shows user account tier, limits, and current quota
      responses:
        "200": 
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLimits"

components:
  schemas:
    Song:
      description: A song that could belong to multiple playlists and be from multiple streaming services.  Belongs to a single user.  
      type: object
      properties:
        title:
          type: string
        artist:
          type: string
        lengthSeconds:
          type: integer
          description: Length of song in seconds, rounded up
        SpotSongIDs:
          type: array
          items:
            $ref: "#/components/schemas/SpotSongID"
        ApplSongIDs:
          type: array
          items:
            $ref: "#/components/schemas/ApplSongID"
        YTMSongIDs:
          type: array
          items:
            $ref: "#/components/schemas/YTMSongID"
    SpotSongID:
      type: string
    YTMSongID:
      type: string
    ApplSongID:
      type: integer
    SpotPlaylistID:
      type: string
    YTMPlaylistID:
      type: string
    ApplPlaylistID:
      type: integer
    PrimaryService:
      type: string
      enum: [Spot, Appl, YTM]
    RatingCategory:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        InternalID: 
          type: string
          format: uuid
    SongRating:
      type: object
      properties:
        RatingCategory:
          $ref: "#/components/schemas/RatingCategory"
        value:
          type: 
            - "integer"
            - "null"
          minimum: -2
          maximum: 2
    InternalPlaylistID:
      type: string
      format: uuid
    Playlist:
      type: object
      properties:
        name:
          type: string
        description:
          type: 
            - "string"
            - "null"
        InternalID:
          type: string
          format: uuid
        SpotPlaylistID:
          type:  
            - "string"
            - "null"
        YTMPlaylistID:
          type:  
            - "string"
            - "null"
        ApplPlaylistID:
          type:  
            - "integer"
            - "null"
        SourceOfTruth:
          description: 'Decides which service is the "source of truth", whose changes are propogated to playlists in other services.  The services that are not sources of truth will have their changes ignored then overwritten by changes from the source playlist.'
          $ref: "#/components/schemas/PrimaryService"
        ImportDate:
          type: string
          format: date-time
        LastUpdated:
          type: string
          format: date-time
        isLoading:
          type: boolean
          description: Whether playlist and song metadata are still being imported
        songs:  
          type: array
          items: # Each song entry is a 2-element array used like a tuple, containing a song object and ratings
            type: array
            prefixItems:
              - $ref: "#/components/schemas/Song"
              - type: array # Ratings are their own sub-array
                items:
                  $ref: "#/components/schemas/SongRating"
            minItems: 2
            maxItems: 2
    UserLimits:
      type: object
      properties:
        tier:
          description: The user's allowance tier.
          type: string
          enum: [Free, Paid, Unlimited]
        TierExpiration:
          description: The date and time when a user's account will be downgraded if payment is not made.
          type:  
            - "string"
            - "null"
          format: date-time
        AutoRenewEnabled:
          type: boolean
        IsRestricted:
          description: Whether an account is being restricted (by exceeding a quota after an allowance changes).
          type: boolean
        LoadedSongs:
          type: integer
        MaximumSongs:
          description: Maximum number of unique songs linked to playlists in a user's account.  One unique song can be linked to multiple song entires per streaming service.  0 indicates unlimited.  
          type: integer
        LoadedPlaylists:
          type: integer
        MaximumPlaylists:
          description: Maximum number of playlists loaded to a user's account.  One playlist can be linked to multiple services.  0 indicates unlimited.  
          type: integer
        MaximumPlaylistLength:
          type: integer
    UserPrefs:
      type: object
      properties:
        UseSingleSongRating:
          type: boolean
          description: Uses the same ratings for a song across all user playlists.
        CopySongRatingSource:
          type: string
          enum: [newest, oldest, disabled]
          description: If Single Song Ratings are disabled, should a new playlist copy ratings from the newest or oldest imported playlist, or not copy ratings?
      